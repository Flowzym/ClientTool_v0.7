
/** Testdaten-Seeding für Clients (kompatibel mit PassphraseGate) */
export type SeedMode = 'skip' | 'replace' | 'newIds';

export async function seedTestData(mode: SeedMode = 'skip'): Promise<{ clients: number; users: number }> {
  let usersCreated = 0;
  try {
    if (typeof ensureDemoUsersTrio === 'function') {
      usersCreated = await ensureDemoUsersTrio();
    }
  } catch {}

  if (mode === 'replace') {
    try { await db.clients.where('sourceId').equals('seed').delete(); } catch {}
  }
  if (mode === 'skip') {
    const existing = await db.clients.where('sourceId').equals('seed').count();
    if (existing > 0) return { clients: 0, users: usersCreated };
  }

  const statuses = [
    'offen','inBearbeitung','terminVereinbart','wartetRueckmeldung','dokumenteOffen',
    'foerderAbklaerung','zugewiesenExtern','ruht','erledigt','nichtErreichbar','abgebrochen'
  ] as const;
  const priorities = ['niedrig','normal','hoch','dringend'] as const;
  const firstNames = ['Anna','Bernd','Clara','David','Eva','Felix','Greta','Hans','Ida','Jakob','Klara','Lukas','Mara','Noah','Olga','Paul'];
  const lastNames  = ['Muster','Beispiel','Kunde','Test','Schmidt','Huber','Maier','Gruber','Müller','Lehner','Hofer','Bauer','Leitner','Fischer','Wagner','Pichler'];

  const now = new Date();
  const toISO = (d: Date) => new Date(d).toISOString();

  const rows = Array.from({ length: 16 }).map((_, i) => {
    const fn = firstNames[i % firstNames.length];
    const ln = lastNames[i % lastNames.length];
    const id = mode === 'newIds' ? `seed-${Date.now()}-${i}` : `seed-${i+1}`;
    const fu = (i % 3 === 0) ? toISO(new Date(now.getTime() + (i+1) * 24*3600*1000)) : undefined;
    const angebot = (['BAM','LL/B+','BwB','NB'] as const)[i % 4];
    return {
      id,
      firstName: fn,
      lastName: ln,
      title: (i % 5 === 0) ? 'Mag.' : undefined,
      email: `${fn.toLowerCase()}.${ln.toLowerCase()}@example.com`,
      phone: `+43 660 ${String(100000 + i).padStart(6,'0')}`,
      priority: priorities[i % priorities.length],
      status: i % 5 === 0 ? 'terminVereinbart' : (i % 4 === 0 ? 'inBearbeitung' : 'offen'),
      angebot,
      followUp: fu,
      lastActivity: toISO(now),
      contactCount: 0,
      contactLog: [],
      isArchived: false,
      archivedAt: undefined,
      assignedTo: (i % 3 === 0) ? 'admin@local' : (i % 3 === 1 ? 'editor@local' : 'user@local'),
      amsAdvisor: (i % 4 === 0) ? 'Claudia Schmitt' : undefined,
      amsAgentFirstName: (i % 4 === 1) ? 'Max' : undefined,
      amsAgentLastName: (i % 4 === 1) ? 'Berater' : undefined,
      isPinned: i % 7 === 0,
      pinnedAt: i % 7 === 0 ? toISO(now) : undefined,
      sourceId: 'seed',
      rowKey: `seed-row-${i+1}`,
      source: { fileName: 'seedTestData', importedAt: toISO(now), mappingPreset: 'demo' }
    } as any;
  });

  let inserted = 0;
  try {
    await db.clients.bulkPut(rows as any);
    inserted = rows.length;
  } catch (e) {
    console.warn('seedTestData: bulkPut failed; put fallback', e);
    for (const c of rows) {
      try { await db.clients.put(c as any); inserted++; } catch {}
    }
  }

  try {
    await db.setKV('seeded.v1', new TextEncoder().encode(new Date().toISOString()));
  } catch {}

  return { clients: inserted, users: usersCreated };
}
