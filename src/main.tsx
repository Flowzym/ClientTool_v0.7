import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import './index.css';

// Lade Network Guard sofort beim App-Start
console.log('üöÄ Klient:innendaten-Tool wird gestartet...');
console.log('üõ°Ô∏è Local-Only Modus: Externe Netzwerkzugriffe werden blockiert');

// Crypto-Key fr√ºh initialisieren (garantiert verf√ºgbaren Key)
import { cryptoManager } from './data/crypto';
import { registerSW } from 'virtual:pwa-register';
import { db } from './data/db';
import { ensureDemoUsersIfEmpty, seedTestData } from './data/seed';

cryptoManager.getActiveKey().catch(err => {
  console.warn('‚ö†Ô∏è Crypto: Key initialization failed:', err);
});

// Auto-seed in DEV-Modus wenn DB leer ist
if (import.meta.env.DEV) {
  cryptoManager.getActiveKey().then(async () => {
    try {
      // Ensure demo users exist
      const usersCreated = await ensureDemoUsersIfEmpty();
      if (usersCreated > 0) {
        console.log(`‚úÖ ${usersCreated} Demo-User erstellt`);
      }

      // Check if clients exist
      const clientCount = await db.clients.count();
      if (clientCount === 0) {
        console.log('üì¶ Datenbank ist leer - erstelle Test-Daten...');
        const result = await seedTestData('newIds');
        console.log(`‚úÖ ${result.clients} Test-Clients erstellt`);
      } else {
        console.log(`üìä ${clientCount} Clients in Datenbank gefunden`);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Auto-seed fehlgeschlagen:', error);
    }
  }).catch(() => {
    console.log('‚è≠Ô∏è Auto-seed √ºbersprungen (kein Crypto-Key verf√ºgbar)');
  });
}

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);

// PWA Service Worker Registration (vite-plugin-pwa)
registerSW({
  immediate: true,
  onRegistered(registration) {
    console.log('‚úÖ Service Worker registered:', registration);
  },
  onRegisterError(error) {
    console.warn('‚ö†Ô∏è Service Worker registration failed:', error);
  }
});
